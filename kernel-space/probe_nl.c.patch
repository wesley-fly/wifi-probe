diff -rNu compat-wireless-2016-01-10/net/mac80211/probe_nl.c compat-wireless-2016-01-10-mod/net/mac80211/probe_nl.c
--- compat-wireless-2016-01-10/net/mac80211/probe_nl.c	1970-01-01 08:00:00.000000000 +0800
+++ compat-wireless-2016-01-10-mod/net/mac80211/probe_nl.c	2019-07-18 16:05:19.108857149 +0800
@@ -0,0 +1,145 @@
+#include <net/netlink.h>
+#include <net/genetlink.h>
+#include "probe_nl.h"
+
+unsigned char g_is_probe;
+unsigned char g_probed_unsend_num;
+unsigned char g_probed_info[MAX_PROBED_NUM][PROBED_INFO];
+
+//1. Registering a family
+//1.1 Define the family, just create an instance of genl_family struct.
+/* attributes */
+enum {
+	DOC_EXMPL_A_UNSPEC,
+	DOC_EXMPL_A_MSG,
+	__DOC_EXMPL_A_MAX,
+};
+#define DOC_EXMPL_A_MAX (__DOC_EXMPL_A_MAX - 1)
+/* attribute policy */
+static struct nla_policy doc_exmpl_genl_policy[DOC_EXMPL_A_MAX + 1] = {
+	[DOC_EXMPL_A_MSG] = { .type = NLA_NUL_STRING },
+};
+/* genl_family definition */
+static struct genl_family doc_exmpl_genl_family = {
+	.id = GENL_ID_GENERATE,
+	.hdrsize = 0,
+	.name = "ProbeMacList",
+	.version = 1,
+	.maxattr = DOC_EXMPL_A_MAX,
+};
+//1.2 Define the operations for the family, which we do by creating at least one instance of the genl_ops structure.
+/* commands: enumeration of all commands (functions) */
+enum {
+	DOC_EXMPL_C_UNSPEC,
+	DOC_EXMPL_C_ECHO,
+	__DOC_EXMPL_C_MAX,
+};
+#define DOC_EXMPL_C_MAX (__DOC_EXMPL_C_MAX - 1)
+
+/* handler */
+int doc_exmpl_echo(struct sk_buff *skb, struct genl_info *info)
+{
+	/* message handling code goes here, return 0 on success, negative value on failure */
+	if (info == NULL)
+		goto out;
+	struct nlmsghdr *nlhdr;
+	struct genlmsghdr *genlhdr;
+	struct nlattr *nlh;
+	
+	char *str;
+	struct sk_buff *skb_send;
+	void *msg_head;
+	int rc;
+	unsigned char snd_buff[1024];
+
+	nlhdr = nlmsg_hdr(skb);
+	genlhdr = nlmsg_data(nlhdr);
+	nlh = genlmsg_data(genlhdr);
+	str = nla_data(nlh);
+	
+	if(*str == 's')
+	{
+		g_is_probe = 1;
+		//printk("doc_exmpl_echo get: %s, start probe\n", str);
+	}
+	else
+	{
+		g_is_probe = 0;
+		//printk("doc_exmpl_echo get: %s, stop probe\n", str);
+	}
+	
+	skb_send = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (skb_send == NULL)
+		goto out;
+	
+	msg_head = genlmsg_put(skb_send, 0, info->snd_seq + 1, &doc_exmpl_genl_family, 0, DOC_EXMPL_C_ECHO);
+	if (msg_head == NULL) {
+		goto out;
+	}
+
+	printk("g_probed_unsend_num = %u\n", g_probed_unsend_num);
+	memcpy(snd_buff, &g_probed_unsend_num, sizeof(g_probed_unsend_num));
+	
+	if(g_probed_info > 0)
+	{
+		memcpy(snd_buff + sizeof(g_probed_unsend_num), g_probed_info, g_probed_unsend_num*PROBED_INFO);
+	}
+	rc = nla_put(skb_send, DOC_EXMPL_A_MSG, sizeof(g_probed_unsend_num) + g_probed_unsend_num*PROBED_INFO, snd_buff);
+	if (rc != 0)
+		goto out;
+	genlmsg_end(skb, msg_head);
+	rc = genlmsg_unicast(genl_info_net(info), skb_send, info->snd_portid);
+	
+	g_probed_unsend_num = 0;
+
+	return 0;
+	
+out:
+	printk("An error occured in doc_exmpl_echo function.\n");
+	return -1;
+}
+
+/* operation definition */
+#if 1 //this need array
+static struct genl_ops doc_exmpl_genl_ops_echo[] = 
+{
+	{
+		.cmd = DOC_EXMPL_C_ECHO,
+		.flags = 0,
+		.policy = doc_exmpl_genl_policy,
+		.doit = doc_exmpl_echo,
+		.dumpit  = NULL,
+	}
+};
+#else
+static struct genl_ops doc_exmpl_genl_ops_echo = {
+	.cmd = DOC_EXMPL_C_ECHO,
+	.flags = 0,
+	.policy = doc_exmpl_genl_policy,
+	.doit = doc_exmpl_echo,
+	.dumpit = NULL,
+};
+#endif
+
+//1.3 Register ProbeMacList family with the Generic Netlink operation, and Register the operations for the family.
+int probe_genetlink_init(void)
+{
+	int rc;
+	g_is_probe = 0; 
+	g_probed_unsend_num = 0;
+
+	rc = genl_register_family_with_ops(&doc_exmpl_genl_family, doc_exmpl_genl_ops_echo);
+	if (rc != 0)
+		goto error;
+	
+	printk("Init probe_genetlink_init modules OK!\n");
+	return 0;
+error:
+	printk("Init probe_genetlink_init modules error!\n");
+	return -1;
+}
+void probe_genetlink_exit(void)
+{
+	printk("Init probe_genetlink_exit modules OK!\n");
+	genl_unregister_family(&doc_exmpl_genl_family);
+}

